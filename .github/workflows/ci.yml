name: CI

on:
  push:
    branches: [ main ]


env:
  SERVICE: kibandaa
  GOPRIVATE: "github.com/hungaikev/*"

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19
        id: go
      # https://github.com/mvdan/github-actions-golang
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.GH_USERNAME }}
        run: git config --global url."https://${USERNAME}:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.12.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/migrate
          which migrate
      - name: Run migrations
        run: echo "MIGRATE"

      - name: Test
        run: make test

  build:
    name: Building and Pushing the Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wismo
          IMAGE_TAG: ${{ github.sha }}
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg VCS_REF=`git rev-parse --short HEAD`  --build-arg APP_NAME=${{ env.SERVICE }}  -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg VCS_REF=`git rev-parse --short HEAD` --build-arg APP_NAME=${{ env.SERVICE }} .
          echo "Pushing image to ECR..."
          docker push  $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "::set-output name=version::$IMAGE_TAG"

