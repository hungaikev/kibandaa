// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for OrderStatus.
const (
	AWAITINGPICKUP OrderStatus = "AWAITING_PICKUP"
	CANCELLED      OrderStatus = "CANCELLED"
	DELIVERED      OrderStatus = "DELIVERED"
	DISPUTED       OrderStatus = "DISPUTED"
	INTRANSIT      OrderStatus = "IN_TRANSIT"
	PENDING        OrderStatus = "PENDING"
	RETURNED       OrderStatus = "RETURNED"
)

// Customer defines model for Customer.
type Customer struct {
	// CreatedAt Created At details
	CreatedAt *time.Time          `json:"created_at,omitempty" validate:"rfc3339_date-time"`
	Email     openapi_types.Email `json:"email" validate:"required,email"`
	Id        uuid.UUID           `json:"id" validate:"required,id"`
	Name      string              `json:"name" validate:"required"`
	Phone     string              `json:"phone" validate:"required,e164"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	Email openapi_types.Email `json:"email" validate:"required,email"`
	Name  string              `json:"name" validate:"required"`
	Phone string              `json:"phone" validate:"required,e164"`
}

// CustomerIdType CustomerID
type CustomerIdType = uuid.UUID

// NewCustomerRequest defines model for NewCustomerRequest.
type NewCustomerRequest struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
	Phone string              `json:"phone" validate:"e164"`
}

// NewOrderRequest New Order Request details
type NewOrderRequest struct {
	Customer CustomerDetails  `json:"customer"`
	Products []ProductInOrder `json:"products"`
}

// NewProduct defines model for NewProduct.
type NewProduct struct {
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// Order defines model for Order.
type Order struct {
	// CreatedAt Created At details
	CreatedAt *time.Time `json:"created_at,omitempty" validate:"rfc3339_date-time"`
	Customer  Customer   `json:"customer"`
	Id        uuid.UUID  `json:"id" validate:"required,id"`
	Products  []Product  `json:"products"`

	// Status Order Status details
	Status OrderStatus `json:"status" validate:"required,oneof=PENDING AWAITING_PICKUP IN_TRANSIT DELIVERED CANCELLED RETURNED DISPUTED"`

	// Taxes Order Taxes details
	Taxes *float64 `json:"taxes,omitempty"`

	// Total Order Total details
	Total *float64 `json:"total,omitempty"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// OrderStatus Order Status details
type OrderStatus string

// OrderIdType OrderID
type OrderIdType = uuid.UUID

// Product defines model for Product.
type Product struct {
	// CreatedAt Created At details
	CreatedAt *time.Time `json:"created_at,omitempty" validate:"rfc3339_date-time"`

	// Description Product Description details
	Description *string   `json:"description,omitempty"`
	Id          uuid.UUID `json:"id" validate:"required,id"`

	// Name Product Name details
	Name      string  `json:"name" validate:"required"`
	UnitPrice float64 `json:"unit_price"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// ProductIdType ProductID
type ProductIdType = uuid.UUID

// ProductInOrder defines model for ProductInOrder.
type ProductInOrder struct {
	ProductId int64 `json:"product_id"`
	Quantity  int   `json:"quantity"`
}

// XRequestIdType X-RequestID
type XRequestIdType = uuid.UUID

// CustomerID CustomerID
type CustomerID = CustomerIdType

// OrderID OrderID
type OrderID = OrderIdType

// ProductID ProductID
type ProductID = ProductIdType

// XRequestID X-RequestID
type XRequestID = XRequestIdType

// Limit defines model for limit.
type Limit = int

// Page defines model for page.
type Page = int

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody = NewCustomerRequest

// PutCustomersCustomerIdJSONRequestBody defines body for PutCustomersCustomerId for application/json ContentType.
type PutCustomersCustomerIdJSONRequestBody = Customer

// PostOrdersJSONRequestBody defines body for PostOrders for application/json ContentType.
type PostOrdersJSONRequestBody = NewOrderRequest

// PutOrdersOrderIdJSONRequestBody defines body for PutOrdersOrderId for application/json ContentType.
type PutOrdersOrderIdJSONRequestBody = Order

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = NewProduct

// PutProductsProductIdJSONRequestBody defines body for PutProductsProductId for application/json ContentType.
type PutProductsProductIdJSONRequestBody = Product

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /customers)
	GetCustomers(c *gin.Context)
	// Create a new customer
	// (POST /customers)
	PostCustomers(c *gin.Context)
	// Delete a customer
	// (DELETE /customers/{customerId})
	DeleteCustomersCustomerId(c *gin.Context, customerId int64)
	// Get a specific customer by ID
	// (GET /customers/{customerId})
	GetCustomersCustomerId(c *gin.Context, customerId int64)
	// Update an existing customer
	// (PUT /customers/{customerId})
	PutCustomersCustomerId(c *gin.Context, customerId int64)
	// Get all orders
	// (GET /orders)
	GetOrders(c *gin.Context)
	// Create a new order
	// (POST /orders)
	PostOrders(c *gin.Context)
	// Delete an order
	// (DELETE /orders/{orderId})
	DeleteOrdersOrderId(c *gin.Context, orderId int64)
	// Get a specific order by ID
	// (GET /orders/{orderId})
	GetOrdersOrderId(c *gin.Context, orderId int64)
	// Update an existing order
	// (PUT /orders/{orderId})
	PutOrdersOrderId(c *gin.Context, orderId int64)
	// Get all products
	// (GET /products)
	GetProducts(c *gin.Context)
	// Create a new product
	// (POST /products)
	PostProducts(c *gin.Context)
	// Delete a product
	// (DELETE /products/{productId})
	DeleteProductsProductId(c *gin.Context, productId int64)
	// Get a specific product by ID
	// (GET /products/{productId})
	GetProductsProductId(c *gin.Context, productId int64)
	// Update an existing product
	// (PUT /products/{productId})
	PutProductsProductId(c *gin.Context, productId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomers(c)
}

// PostCustomers operation middleware
func (siw *ServerInterfaceWrapper) PostCustomers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCustomers(c)
}

// DeleteCustomersCustomerId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomersCustomerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameter("simple", false, "customerId", c.Param("customerId"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCustomersCustomerId(c, customerId)
}

// GetCustomersCustomerId operation middleware
func (siw *ServerInterfaceWrapper) GetCustomersCustomerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameter("simple", false, "customerId", c.Param("customerId"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomersCustomerId(c, customerId)
}

// PutCustomersCustomerId operation middleware
func (siw *ServerInterfaceWrapper) PutCustomersCustomerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameter("simple", false, "customerId", c.Param("customerId"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCustomersCustomerId(c, customerId)
}

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrders(c)
}

// PostOrders operation middleware
func (siw *ServerInterfaceWrapper) PostOrders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOrders(c)
}

// DeleteOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrdersOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrdersOrderId(c, orderId)
}

// GetOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetOrdersOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrdersOrderId(c, orderId)
}

// PutOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) PutOrdersOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOrdersOrderId(c, orderId)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c)
}

// PostProducts operation middleware
func (siw *ServerInterfaceWrapper) PostProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProducts(c)
}

// DeleteProductsProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductsProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "productId", c.Param("productId"), &productId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductsProductId(c, productId)
}

// GetProductsProductId operation middleware
func (siw *ServerInterfaceWrapper) GetProductsProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "productId", c.Param("productId"), &productId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductsProductId(c, productId)
}

// PutProductsProductId operation middleware
func (siw *ServerInterfaceWrapper) PutProductsProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "productId", c.Param("productId"), &productId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProductsProductId(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/customers", wrapper.GetCustomers)
	router.POST(options.BaseURL+"/customers", wrapper.PostCustomers)
	router.DELETE(options.BaseURL+"/customers/:customerId", wrapper.DeleteCustomersCustomerId)
	router.GET(options.BaseURL+"/customers/:customerId", wrapper.GetCustomersCustomerId)
	router.PUT(options.BaseURL+"/customers/:customerId", wrapper.PutCustomersCustomerId)
	router.GET(options.BaseURL+"/orders", wrapper.GetOrders)
	router.POST(options.BaseURL+"/orders", wrapper.PostOrders)
	router.DELETE(options.BaseURL+"/orders/:orderId", wrapper.DeleteOrdersOrderId)
	router.GET(options.BaseURL+"/orders/:orderId", wrapper.GetOrdersOrderId)
	router.PUT(options.BaseURL+"/orders/:orderId", wrapper.PutOrdersOrderId)
	router.GET(options.BaseURL+"/products", wrapper.GetProducts)
	router.POST(options.BaseURL+"/products", wrapper.PostProducts)
	router.DELETE(options.BaseURL+"/products/:productId", wrapper.DeleteProductsProductId)
	router.GET(options.BaseURL+"/products/:productId", wrapper.GetProductsProductId)
	router.PUT(options.BaseURL+"/products/:productId", wrapper.PutProductsProductId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/zOf6EgpLQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
