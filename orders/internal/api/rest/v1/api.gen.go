// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for LivenessStatus.
const (
	DOWN LivenessStatus = "DOWN"
	UP   LivenessStatus = "UP"
)

// Defines values for OrderStatus.
const (
	AWAITINGPICKUP OrderStatus = "AWAITING_PICKUP"
	CANCELLED      OrderStatus = "CANCELLED"
	DELIVERED      OrderStatus = "DELIVERED"
	DISPUTED       OrderStatus = "DISPUTED"
	INTRANSIT      OrderStatus = "IN_TRANSIT"
	PENDING        OrderStatus = "PENDING"
	RETURNED       OrderStatus = "RETURNED"
)

// N400 Bad Request
type N400 = interface{}

// N401 Unauthorized
type N401 = interface{}

// N403 Forbidden
type N403 = interface{}

// N404 Not Found
type N404 = interface{}

// N500 Internal Server Error
type N500 = interface{}

// Customer defines model for Customer.
type Customer struct {
	// CreatedAt Created At details
	CreatedAt *time.Time          `json:"created_at,omitempty" validate:"rfc3339_date-time"`
	Email     openapi_types.Email `json:"email" validate:"required,email"`
	Id        uuid.UUID           `json:"id" validate:"required,id"`
	Name      string              `json:"name" validate:"required"`
	Phone     string              `json:"phone" validate:"required,e164"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	Email openapi_types.Email `json:"email" validate:"required,email"`
	Name  string              `json:"name" validate:"required"`
	Phone string              `json:"phone" validate:"required,e164"`
}

// CustomerIdType CustomerID
type CustomerIdType = uuid.UUID

// Error General API Error Response
type Error struct {
	Code      int        `json:"code"`
	Domain    *string    `json:"domain,omitempty"`
	Message   string     `json:"message"`
	Reason    *string    `json:"reason,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Liveness defines model for Liveness.
type Liveness struct {
	Message *string         `json:"message,omitempty" validate:"required"`
	Status  *LivenessStatus `json:"status,omitempty" validate:"required,oneof=UP DOWN"`
}

// LivenessStatus defines model for Liveness.Status.
type LivenessStatus string

// NewCustomerRequest defines model for NewCustomerRequest.
type NewCustomerRequest struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
	Phone string              `json:"phone" validate:"e164"`
}

// NewOrderRequest New Order Request details
type NewOrderRequest struct {
	Customer CustomerDetails `json:"customer"`
	Products []NewProduct    `json:"products"`

	// Taxes Order Taxes details
	Taxes *float64 `json:"taxes,omitempty"`

	// Total Order Total details
	Total *float64 `json:"total,omitempty"`
}

// NewProduct defines model for NewProduct.
type NewProduct struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	UnitPrice   float64 `json:"unit_price"`
}

// Order defines model for Order.
type Order struct {
	// CreatedAt Created At details
	CreatedAt *time.Time `json:"created_at,omitempty" validate:"rfc3339_date-time"`
	Customer  Customer   `json:"customer"`
	Id        uuid.UUID  `json:"id" validate:"required,id"`
	Products  []Product  `json:"products"`

	// Status Order Status details
	Status OrderStatus `json:"status" validate:"required,oneof=PENDING AWAITING_PICKUP IN_TRANSIT DELIVERED CANCELLED RETURNED DISPUTED"`

	// Taxes Order Taxes details
	Taxes *float64 `json:"taxes,omitempty"`

	// Total Order Total details
	Total *float64 `json:"total,omitempty"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// OrderStatus Order Status details
type OrderStatus string

// OrderIdType OrderID
type OrderIdType = uuid.UUID

// Product defines model for Product.
type Product struct {
	// CreatedAt Created At details
	CreatedAt *time.Time `json:"created_at,omitempty" validate:"rfc3339_date-time"`

	// Description Product Description details
	Description *string   `json:"description,omitempty"`
	Id          uuid.UUID `json:"id" validate:"required,id"`

	// Name Product Name details
	Name      string  `json:"name" validate:"required"`
	UnitPrice float64 `json:"unit_price"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// ProductIdType ProductID
type ProductIdType = uuid.UUID

// XRequestIdType X-RequestID
type XRequestIdType = uuid.UUID

// CustomerID CustomerID
type CustomerID = CustomerIdType

// OrderID OrderID
type OrderID = OrderIdType

// ProductID ProductID
type ProductID = ProductIdType

// XRequestID X-RequestID
type XRequestID = XRequestIdType

// Limit defines model for limit.
type Limit = int

// Page defines model for page.
type Page = int

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	Page  *Page  `form:"page,omitempty" json:"page,omitempty" schema:"page" validate:"omitempty,gte=0"`
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty" schema:"limit" validate:"omitempty,gte=0"`

	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// CreateCustomerParams defines parameters for CreateCustomer.
type CreateCustomerParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// DeleteCustomerByIDParams defines parameters for DeleteCustomerByID.
type DeleteCustomerByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetCustomerByIDParams defines parameters for GetCustomerByID.
type GetCustomerByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// UpdateCustomerByIDParams defines parameters for UpdateCustomerByID.
type UpdateCustomerByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetLivenessParams defines parameters for GetLiveness.
type GetLivenessParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	Page  *Page  `form:"page,omitempty" json:"page,omitempty" schema:"page" validate:"omitempty,gte=0"`
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty" schema:"limit" validate:"omitempty,gte=0"`

	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// CreateOrderParams defines parameters for CreateOrder.
type CreateOrderParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// DeleteOrderByIDParams defines parameters for DeleteOrderByID.
type DeleteOrderByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetOrderByIDParams defines parameters for GetOrderByID.
type GetOrderByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// UpdateOrderByIDParams defines parameters for UpdateOrderByID.
type UpdateOrderByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	Page  *Page  `form:"page,omitempty" json:"page,omitempty" schema:"page" validate:"omitempty,gte=0"`
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty" schema:"limit" validate:"omitempty,gte=0"`

	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// CreateProductParams defines parameters for CreateProduct.
type CreateProductParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// DeleteProductByIDParams defines parameters for DeleteProductByID.
type DeleteProductByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetProductByIDParams defines parameters for GetProductByID.
type GetProductByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// UpdateProductByIDParams defines parameters for UpdateProductByID.
type UpdateProductByIDParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// GetReadinessParams defines parameters for GetReadiness.
type GetReadinessParams struct {
	// XRequestID X-Request-ID
	XRequestID *XRequestID `json:"xRequestID,omitempty"`
}

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = NewCustomerRequest

// UpdateCustomerByIDJSONRequestBody defines body for UpdateCustomerByID for application/json ContentType.
type UpdateCustomerByIDJSONRequestBody = Customer

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = NewOrderRequest

// UpdateOrderByIDJSONRequestBody defines body for UpdateOrderByID for application/json ContentType.
type UpdateOrderByIDJSONRequestBody = Order

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = NewProduct

// UpdateProductByIDJSONRequestBody defines body for UpdateProductByID for application/json ContentType.
type UpdateProductByIDJSONRequestBody = Product

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /customers)
	GetCustomers(c *gin.Context, params GetCustomersParams)
	// Create a new customer
	// (POST /customers)
	CreateCustomer(c *gin.Context, params CreateCustomerParams)
	// Delete a customer
	// (DELETE /customers/{customerID})
	DeleteCustomerByID(c *gin.Context, customerID CustomerID, params DeleteCustomerByIDParams)
	// Get a specific customer by ID
	// (GET /customers/{customerID})
	GetCustomerByID(c *gin.Context, customerID CustomerID, params GetCustomerByIDParams)
	// Update an existing customer
	// (PUT /customers/{customerID})
	UpdateCustomerByID(c *gin.Context, customerID CustomerID, params UpdateCustomerByIDParams)
	// Get liveness status
	// (GET /liveness)
	GetLiveness(c *gin.Context, params GetLivenessParams)
	// Get all orders
	// (GET /orders)
	GetOrders(c *gin.Context, params GetOrdersParams)
	// Create a new order
	// (POST /orders)
	CreateOrder(c *gin.Context, params CreateOrderParams)
	// Delete an order
	// (DELETE /orders/{orderID})
	DeleteOrderByID(c *gin.Context, orderID OrderID, params DeleteOrderByIDParams)
	// Get a specific order by ID
	// (GET /orders/{orderID})
	GetOrderByID(c *gin.Context, orderID OrderID, params GetOrderByIDParams)
	// Update an existing order
	// (PUT /orders/{orderID})
	UpdateOrderByID(c *gin.Context, orderID OrderID, params UpdateOrderByIDParams)
	// Get all products
	// (GET /products)
	GetProducts(c *gin.Context, params GetProductsParams)
	// Create a new product
	// (POST /products)
	CreateProduct(c *gin.Context, params CreateProductParams)
	// Delete a product
	// (DELETE /products/{productID})
	DeleteProductByID(c *gin.Context, productID ProductID, params DeleteProductByIDParams)
	// Get a specific product by ID
	// (GET /products/{productID})
	GetProductByID(c *gin.Context, productID ProductID, params GetProductByIDParams)
	// Update an existing product
	// (PUT /products/{productID})
	UpdateProductByID(c *gin.Context, productID ProductID, params UpdateProductByIDParams)
	// Get readiness status
	// (GET /readiness)
	GetReadiness(c *gin.Context, params GetReadinessParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomers(c, params)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCustomerParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCustomer(c, params)
}

// DeleteCustomerByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomerByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerID" -------------
	var customerID CustomerID

	err = runtime.BindStyledParameter("simple", false, "customerID", c.Param("customerID"), &customerID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCustomerByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCustomerByID(c, customerID, params)
}

// GetCustomerByID operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerID" -------------
	var customerID CustomerID

	err = runtime.BindStyledParameter("simple", false, "customerID", c.Param("customerID"), &customerID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomerByID(c, customerID, params)
}

// UpdateCustomerByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomerByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerID" -------------
	var customerID CustomerID

	err = runtime.BindStyledParameter("simple", false, "customerID", c.Param("customerID"), &customerID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCustomerByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCustomerByID(c, customerID, params)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLivenessParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c, params)
}

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrders(c, params)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateOrderParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c, params)
}

// DeleteOrderByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrderByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", c.Param("orderID"), &orderID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteOrderByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrderByID(c, orderID, params)
}

// GetOrderByID operation middleware
func (siw *ServerInterfaceWrapper) GetOrderByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", c.Param("orderID"), &orderID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrderByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrderByID(c, orderID, params)
}

// UpdateOrderByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrderByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameter("simple", false, "orderID", c.Param("orderID"), &orderID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateOrderByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOrderByID(c, orderID, params)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c, params)
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProductParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c, params)
}

// DeleteProductByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID ProductID

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteProductByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductByID(c, productID, params)
}

// GetProductByID operation middleware
func (siw *ServerInterfaceWrapper) GetProductByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID ProductID

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductByID(c, productID, params)
}

// UpdateProductByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateProductByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "productID" -------------
	var productID ProductID

	err = runtime.BindStyledParameter("simple", false, "productID", c.Param("productID"), &productID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateProductByIDParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProductByID(c, productID, params)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReadinessParams

	headers := c.Request.Header

	// ------------- Optional header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = &XRequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReadiness(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/customers", wrapper.GetCustomers)
	router.POST(options.BaseURL+"/customers", wrapper.CreateCustomer)
	router.DELETE(options.BaseURL+"/customers/:customerID", wrapper.DeleteCustomerByID)
	router.GET(options.BaseURL+"/customers/:customerID", wrapper.GetCustomerByID)
	router.PUT(options.BaseURL+"/customers/:customerID", wrapper.UpdateCustomerByID)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
	router.GET(options.BaseURL+"/orders", wrapper.GetOrders)
	router.POST(options.BaseURL+"/orders", wrapper.CreateOrder)
	router.DELETE(options.BaseURL+"/orders/:orderID", wrapper.DeleteOrderByID)
	router.GET(options.BaseURL+"/orders/:orderID", wrapper.GetOrderByID)
	router.PUT(options.BaseURL+"/orders/:orderID", wrapper.UpdateOrderByID)
	router.GET(options.BaseURL+"/products", wrapper.GetProducts)
	router.POST(options.BaseURL+"/products", wrapper.CreateProduct)
	router.DELETE(options.BaseURL+"/products/:productID", wrapper.DeleteProductByID)
	router.GET(options.BaseURL+"/products/:productID", wrapper.GetProductByID)
	router.PUT(options.BaseURL+"/products/:productID", wrapper.UpdateProductByID)
	router.GET(options.BaseURL+"/readiness", wrapper.GetReadiness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
