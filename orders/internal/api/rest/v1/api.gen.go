// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for LivenessStatus.
const (
	DOWN LivenessStatus = "DOWN"
	UP   LivenessStatus = "UP"
)

// Defines values for OrderStatus.
const (
	AWAITINGPICKUP OrderStatus = "AWAITING_PICKUP"
	CANCELLED      OrderStatus = "CANCELLED"
	DELIVERED      OrderStatus = "DELIVERED"
	DISPUTED       OrderStatus = "DISPUTED"
	INTRANSIT      OrderStatus = "IN_TRANSIT"
	PENDING        OrderStatus = "PENDING"
	RETURNED       OrderStatus = "RETURNED"
)

// N400 Bad Request
type N400 = interface{}

// N401 Unauthorized
type N401 = interface{}

// N403 Forbidden
type N403 = interface{}

// N404 Not Found
type N404 = interface{}

// N500 Internal Server Error
type N500 = interface{}

// Customer defines model for Customer.
type Customer struct {
	// CreatedAt Created At details
	CreatedAt *time.Time          `json:"created_at,omitempty" validate:"rfc3339_date-time"`
	Email     openapi_types.Email `json:"email" validate:"required,email"`
	Id        uuid.UUID           `json:"id" validate:"required,id"`
	Name      string              `json:"name" validate:"required"`
	Phone     string              `json:"phone" validate:"required,e164"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	Email openapi_types.Email `json:"email" validate:"required,email"`
	Name  string              `json:"name" validate:"required"`
	Phone string              `json:"phone" validate:"required,e164"`
}

// CustomerIdType CustomerID
type CustomerIdType = uuid.UUID

// Error General API Error Response
type Error struct {
	Code      int        `json:"code"`
	Domain    *string    `json:"domain,omitempty"`
	Message   string     `json:"message"`
	Reason    *string    `json:"reason,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Liveness defines model for Liveness.
type Liveness struct {
	Message *string         `json:"message,omitempty" validate:"required"`
	Status  *LivenessStatus `json:"status,omitempty" validate:"required,oneof=UP DOWN"`
}

// LivenessStatus defines model for Liveness.Status.
type LivenessStatus string

// NewCustomerRequest defines model for NewCustomerRequest.
type NewCustomerRequest struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
	Phone string              `json:"phone" validate:"e164"`
}

// NewOrderRequest New Order Request details
type NewOrderRequest struct {
	Customer CustomerDetails  `json:"customer"`
	Products []ProductInOrder `json:"products"`
}

// NewProduct defines model for NewProduct.
type NewProduct struct {
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// Order defines model for Order.
type Order struct {
	// CreatedAt Created At details
	CreatedAt *time.Time `json:"created_at,omitempty" validate:"rfc3339_date-time"`
	Customer  Customer   `json:"customer"`
	Id        uuid.UUID  `json:"id" validate:"required,id"`
	Products  []Product  `json:"products"`

	// Status Order Status details
	Status OrderStatus `json:"status" validate:"required,oneof=PENDING AWAITING_PICKUP IN_TRANSIT DELIVERED CANCELLED RETURNED DISPUTED"`

	// Taxes Order Taxes details
	Taxes *float64 `json:"taxes,omitempty"`

	// Total Order Total details
	Total *float64 `json:"total,omitempty"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// OrderStatus Order Status details
type OrderStatus string

// OrderIdType OrderID
type OrderIdType = uuid.UUID

// Product defines model for Product.
type Product struct {
	// CreatedAt Created At details
	CreatedAt *time.Time `json:"created_at,omitempty" validate:"rfc3339_date-time"`

	// Description Product Description details
	Description *string   `json:"description,omitempty"`
	Id          uuid.UUID `json:"id" validate:"required,id"`

	// Name Product Name details
	Name      string  `json:"name" validate:"required"`
	UnitPrice float64 `json:"unit_price"`

	// UpdatedAt Updated At details
	UpdatedAt *time.Time `json:"updated_at,omitempty" validate:"rfc3339_date-time"`
}

// ProductIdType ProductID
type ProductIdType = uuid.UUID

// ProductInOrder defines model for ProductInOrder.
type ProductInOrder struct {
	ProductId int64 `json:"product_id"`
	Quantity  int   `json:"quantity"`
}

// XRequestIdType X-RequestID
type XRequestIdType = uuid.UUID

// CustomerID CustomerID
type CustomerID = CustomerIdType

// OrderID OrderID
type OrderID = OrderIdType

// ProductID ProductID
type ProductID = ProductIdType

// XRequestID X-RequestID
type XRequestID = XRequestIdType

// Limit defines model for limit.
type Limit = int

// Page defines model for page.
type Page = int

// GetLivenessParams defines parameters for GetLiveness.
type GetLivenessParams struct {
	// XRequestID X-Request-ID
	XRequestID XRequestID `json:"xRequestID"`
}

// GetReadinessParams defines parameters for GetReadiness.
type GetReadinessParams struct {
	// XRequestID X-Request-ID
	XRequestID XRequestID `json:"xRequestID"`
}

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody = NewCustomerRequest

// PutCustomersCustomerIdJSONRequestBody defines body for PutCustomersCustomerId for application/json ContentType.
type PutCustomersCustomerIdJSONRequestBody = Customer

// PostOrdersJSONRequestBody defines body for PostOrders for application/json ContentType.
type PostOrdersJSONRequestBody = NewOrderRequest

// PutOrdersOrderIdJSONRequestBody defines body for PutOrdersOrderId for application/json ContentType.
type PutOrdersOrderIdJSONRequestBody = Order

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = NewProduct

// PutProductsProductIdJSONRequestBody defines body for PutProductsProductId for application/json ContentType.
type PutProductsProductIdJSONRequestBody = Product

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /customers)
	GetCustomers(c *gin.Context)
	// Create a new customer
	// (POST /customers)
	PostCustomers(c *gin.Context)
	// Delete a customer
	// (DELETE /customers/{customerId})
	DeleteCustomersCustomerId(c *gin.Context, customerId int64)
	// Get a specific customer by ID
	// (GET /customers/{customerId})
	GetCustomersCustomerId(c *gin.Context, customerId int64)
	// Update an existing customer
	// (PUT /customers/{customerId})
	PutCustomersCustomerId(c *gin.Context, customerId int64)
	// Get liveness status
	// (GET /liveness)
	GetLiveness(c *gin.Context, params GetLivenessParams)
	// Get all orders
	// (GET /orders)
	GetOrders(c *gin.Context)
	// Create a new order
	// (POST /orders)
	PostOrders(c *gin.Context)
	// Delete an order
	// (DELETE /orders/{orderId})
	DeleteOrdersOrderId(c *gin.Context, orderId int64)
	// Get a specific order by ID
	// (GET /orders/{orderId})
	GetOrdersOrderId(c *gin.Context, orderId int64)
	// Update an existing order
	// (PUT /orders/{orderId})
	PutOrdersOrderId(c *gin.Context, orderId int64)
	// Get all products
	// (GET /products)
	GetProducts(c *gin.Context)
	// Create a new product
	// (POST /products)
	PostProducts(c *gin.Context)
	// Delete a product
	// (DELETE /products/{productId})
	DeleteProductsProductId(c *gin.Context, productId int64)
	// Get a specific product by ID
	// (GET /products/{productId})
	GetProductsProductId(c *gin.Context, productId int64)
	// Update an existing product
	// (PUT /products/{productId})
	PutProductsProductId(c *gin.Context, productId int64)
	// Get readiness status
	// (GET /readiness)
	GetReadiness(c *gin.Context, params GetReadinessParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomers(c)
}

// PostCustomers operation middleware
func (siw *ServerInterfaceWrapper) PostCustomers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCustomers(c)
}

// DeleteCustomersCustomerId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomersCustomerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameter("simple", false, "customerId", c.Param("customerId"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCustomersCustomerId(c, customerId)
}

// GetCustomersCustomerId operation middleware
func (siw *ServerInterfaceWrapper) GetCustomersCustomerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameter("simple", false, "customerId", c.Param("customerId"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomersCustomerId(c, customerId)
}

// PutCustomersCustomerId operation middleware
func (siw *ServerInterfaceWrapper) PutCustomersCustomerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameter("simple", false, "customerId", c.Param("customerId"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCustomersCustomerId(c, customerId)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLivenessParams

	headers := c.Request.Header

	// ------------- Required header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = XRequestID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter xRequestID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c, params)
}

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrders(c)
}

// PostOrders operation middleware
func (siw *ServerInterfaceWrapper) PostOrders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOrders(c)
}

// DeleteOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrdersOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrdersOrderId(c, orderId)
}

// GetOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetOrdersOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrdersOrderId(c, orderId)
}

// PutOrdersOrderId operation middleware
func (siw *ServerInterfaceWrapper) PutOrdersOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOrdersOrderId(c, orderId)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c)
}

// PostProducts operation middleware
func (siw *ServerInterfaceWrapper) PostProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProducts(c)
}

// DeleteProductsProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductsProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "productId", c.Param("productId"), &productId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductsProductId(c, productId)
}

// GetProductsProductId operation middleware
func (siw *ServerInterfaceWrapper) GetProductsProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "productId", c.Param("productId"), &productId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductsProductId(c, productId)
}

// PutProductsProductId operation middleware
func (siw *ServerInterfaceWrapper) PutProductsProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameter("simple", false, "productId", c.Param("productId"), &productId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProductsProductId(c, productId)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReadinessParams

	headers := c.Request.Header

	// ------------- Required header parameter "xRequestID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("xRequestID")]; found {
		var XRequestID XRequestID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for xRequestID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "xRequestID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter xRequestID: %w", err), http.StatusBadRequest)
			return
		}

		params.XRequestID = XRequestID

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter xRequestID is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReadiness(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/customers", wrapper.GetCustomers)
	router.POST(options.BaseURL+"/customers", wrapper.PostCustomers)
	router.DELETE(options.BaseURL+"/customers/:customerId", wrapper.DeleteCustomersCustomerId)
	router.GET(options.BaseURL+"/customers/:customerId", wrapper.GetCustomersCustomerId)
	router.PUT(options.BaseURL+"/customers/:customerId", wrapper.PutCustomersCustomerId)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
	router.GET(options.BaseURL+"/orders", wrapper.GetOrders)
	router.POST(options.BaseURL+"/orders", wrapper.PostOrders)
	router.DELETE(options.BaseURL+"/orders/:orderId", wrapper.DeleteOrdersOrderId)
	router.GET(options.BaseURL+"/orders/:orderId", wrapper.GetOrdersOrderId)
	router.PUT(options.BaseURL+"/orders/:orderId", wrapper.PutOrdersOrderId)
	router.GET(options.BaseURL+"/products", wrapper.GetProducts)
	router.POST(options.BaseURL+"/products", wrapper.PostProducts)
	router.DELETE(options.BaseURL+"/products/:productId", wrapper.DeleteProductsProductId)
	router.GET(options.BaseURL+"/products/:productId", wrapper.GetProductsProductId)
	router.PUT(options.BaseURL+"/products/:productId", wrapper.PutProductsProductId)
	router.GET(options.BaseURL+"/readiness", wrapper.GetReadiness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
