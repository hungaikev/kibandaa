// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/hungaikev/kibandaa/orders/internal/api/rest/v1"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeleteCustomerByID provides a mock function with given fields: ctx, id
func (_m *Store) DeleteCustomerByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomerByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrderByID provides a mock function with given fields: ctx, id
func (_m *Store) DeleteOrderByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductByID provides a mock function with given fields: ctx, id
func (_m *Store) DeleteProductByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerByID provides a mock function with given fields: ctx, id
func (_m *Store) GetCustomerByID(ctx context.Context, id string) (v1.Customer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByID")
	}

	var r0 v1.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.Customer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: ctx
func (_m *Store) GetCustomers(ctx context.Context) ([]v1.Customer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomers")
	}

	var r0 []v1.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *Store) GetOrderByID(ctx context.Context, id string) (v1.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 v1.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx
func (_m *Store) GetOrders(ctx context.Context) ([]v1.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []v1.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *Store) GetProductByID(ctx context.Context, id string) (v1.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 v1.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx
func (_m *Store) GetProducts(ctx context.Context) ([]v1.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []v1.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCustomer provides a mock function with given fields: ctx, customer
func (_m *Store) PostCustomer(ctx context.Context, customer v1.Customer) (v1.Customer, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomer")
	}

	var r0 v1.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Customer) (v1.Customer, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Customer) v1.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(v1.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOrder provides a mock function with given fields: ctx, order
func (_m *Store) PostOrder(ctx context.Context, order v1.Order) (v1.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for PostOrder")
	}

	var r0 v1.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Order) (v1.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Order) v1.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(v1.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProduct provides a mock function with given fields: ctx, product
func (_m *Store) PostProduct(ctx context.Context, product v1.Product) (v1.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for PostProduct")
	}

	var r0 v1.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Product) (v1.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Product) v1.Product); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(v1.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomerByID provides a mock function with given fields: ctx, customer
func (_m *Store) UpdateCustomerByID(ctx context.Context, customer v1.Customer) (v1.Customer, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomerByID")
	}

	var r0 v1.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Customer) (v1.Customer, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Customer) v1.Customer); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(v1.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderByID provides a mock function with given fields: ctx, order
func (_m *Store) UpdateOrderByID(ctx context.Context, order v1.Order) (v1.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderByID")
	}

	var r0 v1.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Order) (v1.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Order) v1.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(v1.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductByID provides a mock function with given fields: ctx, product
func (_m *Store) UpdateProductByID(ctx context.Context, product v1.Product) (v1.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductByID")
	}

	var r0 v1.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Product) (v1.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Product) v1.Product); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(v1.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
